"use strict";
const tslib_1 = require("tslib");
const plugin_1 = tslib_1.__importDefault(require("tailwindcss/plugin"));
const optionsUtils_1 = require("./utils/optionsUtils");
const themeUtils_1 = require("./utils/themeUtils");
const defaultOptions = {
    defaultTheme: { extend: {} },
    themes: []
};
// I copied the way tailwind does dark themeing internally, but modified it to handle any theme name
// It is on the developer to make sure the theme name doesn't conflict with any other variants
/**
 * @param themes the themes to add as variants
 * @param helpers the tailwind plugin helpers
 */
const addThemeVariants = (themes, { addVariant, e }) => void themes.map(({ name }) => addVariant(name === optionsUtils_1.defaultThemeName ? 'defaultTheme' : name, `.${e(name === optionsUtils_1.defaultThemeName ? 'defaultTheme' : name)} &`));
/**
 * @param themes the themes to add as variants
 * @param api the tailwind plugin helpers
 */
const addThemeStyles = (themes, api) => {
    const { addBase, e } = api;
    themes.forEach(({ name, extend }) => {
        addBase({
            [name === optionsUtils_1.defaultThemeName ? ':root' : `.${e(name)}`]: (0, themeUtils_1.resolveThemeExtensionAsCustomProps)(extend, api)
        });
    });
};
const multiThemePlugin = plugin_1.default.withOptions((options = defaultOptions) => api => {
    const themes = (0, optionsUtils_1.getThemesFromOptions)(options);
    addThemeVariants(themes, api);
    addThemeStyles(themes, api);
}, (options = defaultOptions) => ({
    theme: {
        extend: (0, themeUtils_1.resolveThemeExtensionsAsTailwindExtension)((0, optionsUtils_1.getThemesFromOptions)(options))
    }
}));
module.exports = multiThemePlugin;
