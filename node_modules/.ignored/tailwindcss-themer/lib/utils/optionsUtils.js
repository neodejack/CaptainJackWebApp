"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThemesFromOptions = exports.validateOptions = exports.defaultThemeName = void 0;
const tslib_1 = require("tslib");
const just_unique_1 = tslib_1.__importDefault(require("just-unique"));
exports.defaultThemeName = '__default';
/**
 * @param options
 * @throws an {@link Error} if the options are invalid
 */
const validateOptions = ({ themes = [] }) => {
    if (themes.some(x => !x.name)) {
        throw new Error('Every theme in the themes array in the multiThemePlugin options must have a name property set to a unique string');
    }
    const names = themes.map(x => x.name);
    if ((0, just_unique_1.default)(names).length != names.length) {
        throw new Error('Every theme in the themes array in the multiThemePlugin options must have a unique name');
    }
    if (themes.some(x => x.name === exports.defaultThemeName)) {
        throw new Error(`No theme in the themes array in the multiThemePlugin options cannot have a name of "${exports.defaultThemeName}"`);
    }
};
exports.validateOptions = validateOptions;
/**
 * @param options
 * @return the theme options reduced down to an array of themes
 * @throws an {@link Error} if the options are invalid
 */
const getThemesFromOptions = (options) => {
    (0, exports.validateOptions)(options);
    const { defaultTheme, themes = [] } = options;
    return [
        Object.assign(Object.assign({ extend: {} }, defaultTheme), { name: exports.defaultThemeName }),
        ...themes.map(x => (Object.assign({ extend: {} }, x)))
    ];
};
exports.getThemesFromOptions = getThemesFromOptions;
