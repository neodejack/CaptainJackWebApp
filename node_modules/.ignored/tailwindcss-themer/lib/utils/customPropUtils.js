"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asCustomProp = exports.toCustomPropName = exports.toCustomPropValue = void 0;
const colorUtils_1 = require("./colorUtils");
/**
 * @param value - a custom prop value
 * @return the value converted to a string of its rgb components comma separated if it is a color else it returns the value unaltered
 */
const toCustomPropValue = (value) => {
    if (typeof value === 'number') {
        return value.toString();
    }
    else if ((0, colorUtils_1.isColor)(value)) {
        return (0, colorUtils_1.toRgb)(value);
    }
    else {
        return value;
    }
};
exports.toCustomPropValue = toCustomPropValue;
const whitespaceRegex = /\s/g;
/**
 * @param valuePath - the path to get to the value
 * @return valuePath concatenated as a kebab cased custom property
 */
const toCustomPropName = (valuePath) => {
    if (valuePath.some(x => whitespaceRegex.test(x))) {
        throw new Error(`cannot have whitespace in any property in a theme config, found "${valuePath.find(x => whitespaceRegex.test(x))}"`);
    }
    return `--${valuePath
        .filter(step => step.toLowerCase() !== 'default')
        .join('-')}`;
};
exports.toCustomPropName = toCustomPropName;
/**
 * @param value - the value of the custom prop to generate
 * @param valuePath - the path to get to the value
 * @return a normal custom prop generated from valuePath if the value is not a color else it is a function that generates custom prop configured with opacity when called with opacity configuration
 */
const asCustomProp = (value, valuePath) => {
    const customPropName = (0, exports.toCustomPropName)(valuePath);
    if ((0, colorUtils_1.isColor)(value)) {
        return (0, colorUtils_1.withOpacity)(customPropName);
    }
    else {
        return `var(${customPropName})`;
    }
};
exports.asCustomProp = asCustomProp;
